// Generated by CoffeeScript 1.10.0
var Parser, log;

log = function(data) {
  return console.log(data);
};


/* PARSER */

Parser = (function() {
  function Parser(dict) {
    this.dict = dict;
  }

  Parser.prototype.unicode = function(line) {
    var char, code, i, len, match, newLine, pattern;
    newLine = [];
    pattern = /[\w\n\s\.:=\$\+\-\*\/\(\),"'\|{}<>%&!#\[\]]/;
    for (i = 0, len = line.length; i < len; i++) {
      char = line[i];
      match = char.match(pattern);
      if (match != null) {
        newLine.push(char);
      } else {
        code = char.charCodeAt(0);
        newLine.push("_u" + code);
      }
    }
    return newLine.join("");
  };

  Parser.prototype.parse = function(line) {

    /* FIND NON-STRING SECTIONS */
    var decoded, end, i, index, irrelevant, j, len, len1, match, part, pattern, positions, section, sections, start;
    pattern = /'|"/g;
    positions = [0];
    while (true) {
      match = pattern.exec(line);
      if (match != null) {
        positions.push(match.index);
      } else {
        break;
      }
    }
    positions.push(line.length);
    sections = [];
    for (index = i = 0, len = positions.length; i < len; index = i += 2) {
      irrelevant = positions[index];
      start = positions[index];
      end = positions[index + 1];
      if (start !== end - 1) {
        sections.push({
          start: start,
          end: end
        });
      }
    }

    /* CURRENTLY DISABLED */

    /*for section in sections
      for entry, def of @dict.syntax
        part = line[section.start...section.end]
        match = part.match def.pattern
        if match?
         * parsed = part.replace def.pattern, def.output
          parsed = def.process(part)
          line = line.replace part, parsed
     */
    for (j = 0, len1 = sections.length; j < len1; j++) {
      section = sections[j];
      part = line.slice(section.start, section.end);
      decoded = this.unicode(part);
      line = line.replace(part, decoded);
    }
    return line;
  };

  return Parser;

})();

module.exports = Parser;
